name: Cross-Platform Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

jobs:
  prepare-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.new_version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        
      - name: Setup Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Calculate new version
        id: new_version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ github.event.inputs.version_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
          
      - name: Update package.json version
        run: |
          echo "Updating package.json to version ${{ steps.new_version.outputs.version }}"
          bun run --bun -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            console.log('Current version:', pkg.version);
            console.log('New version:', '${{ steps.new_version.outputs.version }}');
            pkg.version = '${{ steps.new_version.outputs.version }}';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated package.json');
          "
          
      - name: Update Tauri version
        run: |
          bun run --bun -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
            config.version = '${{ steps.new_version.outputs.version }}';
            fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(config, null, 2) + '\n');
          "
          
      - name: Update Cargo.toml version
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.new_version.outputs.version }}"/' src-tauri/Cargo.toml
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Create changelog content
          CHANGELOG="## What's Changed in v${{ steps.new_version.outputs.version }}
          
          $COMMITS
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ steps.new_version.outputs.version }}"
          
          # Save changelog to output
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          
      - name: Commit version changes
        run: |
          git add package.json src-tauri/tauri.conf.json src-tauri/Cargo.toml
          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to v${{ steps.new_version.outputs.version }}"
          else
            echo "No version changes to commit"
          fi
          
      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.new_version.outputs.version }}" -m "Release v${{ steps.new_version.outputs.version }}"
          # Always try to push main (will be no-op if no changes)
          git push origin main || echo "No changes to push to main"
          git push origin "v${{ steps.new_version.outputs.version }}"

  build:
    needs: prepare-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-15'
            args: '--target aarch64-apple-darwin'
            name: 'macOS-aarch64'
          - platform: 'macos-15'
            args: '--target x86_64-apple-darwin'
            name: 'macOS-x86_64'
          - platform: 'windows-latest'
            args: ''
            name: 'windows-x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-15' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}


      - name: Install frontend dependencies
        run: bun install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-15'
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.name }}
          path: |
            src-tauri/target/*/release/bundle/dmg/*.dmg
            src-tauri/target/*/release/bundle/macos/*.app

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.name }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe

  create-release:
    needs: [prepare-release, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: always() && needs.prepare-release.result == 'success'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifacts
        run: |
          echo "Listing all downloaded artifacts:"
          find artifacts -type f -ls || echo "No artifacts found"
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy binary files
          find artifacts -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.exe" \) -exec cp {} release-assets/ \; || echo "No binary files found"
          
          # Zip macOS app bundles
          find artifacts -name "*.app" -type d | while read app; do
            app_name=$(basename "$app")
            echo "Zipping $app as ${app_name%.*}-${{ needs.prepare-release.outputs.version }}.zip"
            zip -r "release-assets/${app_name%.*}-${{ needs.prepare-release.outputs.version }}.zip" "$app"
          done || echo "No .app bundles found"
          
          echo "Final release assets:"
          ls -la release-assets/ || echo "No release assets prepared"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: v${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.prepare-release.outputs.changelog }}
          draft: false
          prerelease: false
          files: release-assets/*
          fail_on_unmatched_files: false